// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\x31\xd0\x1d\x70\x5d\x20\x89\xdb\x1e\x0e\x38\xe4\xd3\x79\x93\x6c\xd7\x68\xf3\x82\xb8\x6d\xb0\xb8\x16\xc6\x98\x1a\x4b\xdc\x48\xa4\x4a\x52\x76\xdd\x43\xfe\xfb\x81\x94\x64\x4b\xb2\x64\xcb\x76\xd3\xf5\x2e\xb2\xc0\xa2\xb2\x44\xce\x3b\x1f\xce\x0c\x99\xff\x1d\x01\x78\x7a\x86\x41\x40\xca\x3b\x03\xef\xf5\xe9\x4b\xef\xd8\xbe\xe3\x62\x22\xbd\x33\xb0\xdf\x01\x3c\xc3\x4d\x44\xf6\xfb\x79\x94\x6a\x43\x0a\xae\x50\x60\x40\x0a\xfa\xf7\x43\xf8\x95\xa2\xc4\x3e\xde\x0e\xdc\x54\x00\x6f\x4a\x4a\x73\x29\xec\x84\xe9\xcb\xd3\x57\x39\x4d\x00\x8f\x49\x61\x90\x99\x05\x61\x00\x4f\x60\xec\x28\x5f\x71\x16\x22\x45\xf0\x91\x04\x7d\xe3\x98\xcf\x00\xf0\x52\x15\xd9\xef\xa1\x31\x89\x3e\xeb\xf5\x02\x6e\xc2\x74\x7c\xca\x64\xdc\xd3\x18\xeb\x54\x04\x27\x4c\x30\xd3\x63\x31\x9e\xe0\x4c\x2f\xe7\x51\x8c\xdc\xcd\x8c\xa7\x19\xc9\xff\x04\xf6\x8d\x9d\xe9\xb9\x31\x8f\x47\x00\x8f\x4e\x59\xcd\x42\x8a\x49\x7b\x67\xf0\xdf\x4c\x4e\xc7\xac\x10\xda\xfe\xb0\x33\x3e\xbb\xb1\x4c\x0a\x9d\x56\x06\x63\x92\x44\x9c\xa1\xe1\x52\xf4\x7e\xd7\x52\x2c\xc7\x26\x4a\xfa\x29\xeb\x38\x16\x4d\xa8\x97\x16\xef\x61\xc2\x7b\xd3\x57\x3d\x96\x19\xbc\x6c\xb1\x80\xca\x06\xb4\xe2\xa7\x71\x8c\x6a\x6e\x75\xbd\xe7\x51\x04\x8a\x8c\xe2\x34\x25\x30\x21\x81\x36\x68\x52\x0d\x72\x02\x08\x39\x31\x40\xe1\x03\x37\x1a\x1e\xd2\x31\x31\x29\x26\x3c\x80\x89\x54\xc0\xa4\x10\xc4\x0c\x9f\x72\x33\x5f\xd8\x11\xc0\x93\x09\x29\x27\xf2\xc0\xb7\x3c\xde\x90\xc9\xc3\xa0\x3c\x48\x91\x4e\xa4\xd0\xa4\x2b\xb2\x01\x78\xaf\x5f\xbe\xac\xbd\x02\xf0\x7c\xd2\x4c\xf1\xc4\xe4\x51\x52\x22\x94\x69\x64\x1d\x82\x2b\xd3\x00\xbc\xbf\x2b\x9a\xd8\x19\x7f\xeb\xf9\x34\xe1\x82\x5b\x0a\xda\x3a\x1f\x67\x7a\x29\xd8\x1d\x25\xd1\xdc\xab\xcc\x7d\x3c\x6a\x7a\x7e\x2c\x69\x90\xa0\xc2\x98\x0c\xa9\xa5\xbf\xb2\xff\x6a\xb2\x17\x11\xeb\xfe\x3d\x5e\xab\xd7\x35\xc6\x64\x4d\x6f\x1d\x51\x18\xdf\x48\x18\x13\x44\x52\x3e\x90\x0f\x69\x72\x5a\x27\xc1\xdd\xcc\x2f\x29\xa9\x79\xfd\x93\xa2\x2f\x29\x57\x64\xbd\x30\xc1\x48\x53\xed\xb3\x99\x27\x4e\x30\x6d\x14\x17\x41\x59\xfd\xc7\xe3\xcd\xea\x30\x45\x3e\x09\xc3\x31\xd2\xa7\x9a\x98\x22\x33\x7a\xa0\xf9\x88\xfb\x1b\x74\x7c\x1f\x12\x0c\xdd\xf8\xb7\x34\x1f\xf8\x2e\x92\xfa\xb7\x03\xe8\x33\x46\x5a\x1f\xb2\x7a\xe8\x24\xb4\x5a\x76\x56\x31\x53\xea\x2d\xcd\x17\x6a\xe2\xe1\xaa\xa9\x28\xb0\x0a\x6c\xd6\xed\xce\x0d\x3c\x54\x95\x3a\xa9\x71\x81\x06\x19\x09\xbb\xc0\xb2\xf1\x3f\x46\xfc\xc5\xf3\xe7\x12\x90\x18\x0c\xea\x10\x52\x6c\x9c\xcb\xc9\x9f\x8f\x6a\x16\xf0\x7c\x8a\xc8\xd0\x7a\x68\xcf\xc6\x2c\xa1\x7c\x0d\x4c\x5f\xb8\xa1\x87\x89\xd4\x15\xd9\x0e\x05\xac\xef\x43\x34\xc0\x75\x19\xac\xff\xa1\xc1\x4e\xb4\x98\xed\x93\x36\x4a\xce\x0f\x66\x55\x3c\xc3\x75\x07\x15\x9f\xe1\xfa\x19\xae\x9f\x0a\xae\x93\x74\x43\x1a\x9e\x28\x39\xe5\xb6\x0e\xea\x04\xd7\xe7\x8a\xf0\x50\xe1\xba\x22\xdb\x0f\x81\xeb\xb1\xf4\x57\xdc\x9e\x45\x44\xd3\x97\x52\x40\x18\x95\xd6\xe3\xe1\x3b\xe8\x7c\xa5\x83\x2e\x1a\xef\x1e\x55\x47\x25\x83\xd5\x6b\xbf\x5e\xc4\xb5\xd9\xad\x00\x44\xb0\x73\x6d\x05\x92\xd3\xd2\x9d\xea\xba\x77\x96\xe1\x61\x85\x60\x55\xb8\x1f\x12\x83\xcf\x3b\x6c\x07\x15\x9f\x77\xd8\x3f\xcb\x0e\x0b\x2f\xd0\x41\x83\x7d\xd6\xc0\x42\x62\x0f\xe4\x03\x9f\x80\x90\x06\x34\x99\x9f\xfe\x34\x5b\x70\x23\x58\x2e\x7b\x8e\x5b\xe1\x64\xaa\x04\xe4\x53\x81\x8b\x89\x54\xb1\x43\x44\xc0\xb1\x4c\x0d\x60\xc2\x41\x93\x9a\xae\xdd\xb9\xdf\x90\xf9\x98\x51\x18\x2c\x09\x1c\x1e\x7c\xe6\x32\xee\x04\x9d\xbb\xf8\x67\xd1\x5d\x2d\x49\xb3\xec\x6f\x56\xb6\xd7\xfe\xfd\x70\x98\x10\xeb\xdf\x0f\x6d\xd4\x9e\xbb\xa8\x2d\x3b\xb2\x08\x27\x39\xfe\x9d\xd8\x72\x67\xf2\x12\x65\x5d\x61\x78\xcd\xb2\xc5\x02\xa9\x59\xbb\x16\x94\xc7\x95\x6f\x45\x83\xfb\x3e\xe4\x2c\x5c\xac\x98\x54\x9f\x10\x6a\x73\xf2\xea\x18\xc8\xb0\xd3\x9f\xbc\x46\xeb\xe0\x14\x79\x84\x63\x1e\x71\x33\x1f\x7d\x93\x62\xd5\xd1\x05\x6b\x54\x0a\xab\x6b\xc9\xe3\x86\xe2\xfa\xf8\xee\x08\x51\x17\xbc\x2c\x0a\x38\x51\x4a\x4a\x8c\x8f\xa1\x78\x7e\xcd\xdc\xf3\x8c\xec\xb3\xbf\xaa\xdd\x4a\xb6\x5b\xe3\x63\xfd\x04\xb9\xa3\x2a\xcb\xb1\xc5\xaf\x03\xa1\x0d\x0a\x46\x6f\x94\x4c\x93\x7d\x5c\x9b\x8f\xdf\xde\xb1\x85\x04\x60\x47\xc3\x8b\xf8\x5f\xa7\x11\xaa\x80\xd6\x3a\x36\xe6\x62\xf4\x25\x45\x61\xb8\x99\xb7\x31\xe5\xc2\x50\x50\xc1\x07\x00\x2f\x83\x81\xfc\xf3\x3f\x5f\xb7\x88\x74\xc5\x05\x8f\xd3\x18\x44\x1a\x8f\x49\xd9\x2c\x8d\xe7\x42\x6a\x78\xe1\xd3\x04\xd3\xc8\x68\x30\x12\xbe\x91\x92\x6d\x22\xe2\xd7\x27\x15\x11\xbf\xee\x2d\x62\xbe\x6d\x6d\xef\xb2\xa2\x7b\x5e\xb0\x84\xc0\x46\x0f\xbc\x90\x0e\x1c\x31\x02\x4c\x8d\x3c\x09\x48\x58\x38\xae\xee\x65\xcd\x92\xf8\xa4\xed\xa6\xf5\x94\x06\xbb\x5e\x18\x6a\x26\xd5\x03\x29\x10\xd2\xa7\x92\xd1\x72\x11\xd6\x1b\xaf\x7d\xf5\x0d\x2a\xa6\xb0\xe4\x26\x5c\xd8\x3c\xdf\x45\x35\x0a\xbf\xc9\x53\x9d\x56\xe8\xad\xca\x8f\x82\x52\x45\xfe\xa0\x06\x4a\x5b\x2f\xd3\x69\xc2\x6c\xa2\xbc\x8b\xd7\x6d\xfe\xf5\xf1\xf6\x1c\xb8\x7f\x0c\xe3\x08\xc5\x83\x4b\xc3\xec\xff\x9f\x6c\x32\x87\x86\x40\x0a\x72\x2f\xe6\x32\xfd\xe4\x1d\xc3\x84\x47\x51\xe6\xfe\xb9\x4c\x01\x15\xc1\xcf\xbf\xdd\x58\x1a\xcd\x51\xa0\x89\xa5\xca\x42\xb5\xb3\xe1\xae\x62\x0e\x73\x2a\x99\x27\x9a\x39\x71\x8c\x47\x4a\x46\x34\x42\xb5\xdb\x6e\x64\x6d\x31\xe8\x5f\x81\x25\xe2\x34\x2e\x1f\x24\xbd\x40\x25\xba\x45\xcd\x2f\x52\xc1\x2c\x24\x01\x5a\xc6\x04\x26\xe4\x22\xd0\xce\x4e\x18\x29\x42\x7f\x0e\x99\x5d\xfd\x6a\xa0\xd4\x72\x86\x86\x1c\x67\x8f\x00\x09\xb8\x19\xad\xa6\x6c\xdb\x59\xc6\x60\x00\x52\x38\x9b\x04\xdc\x80\xa2\x44\x6a\x6e\xa4\x9a\x37\x7b\xc3\xb2\x64\x32\x8e\xb9\xd9\x99\x63\x88\x3a\x2c\xce\xf3\x2c\xcb\x9c\x5c\x2b\x3b\xa3\x88\x46\xda\xa0\xd9\x0d\x00\xef\x43\x32\xa1\x5d\xcc\xca\x01\x9b\xe5\x6a\x29\xc2\x0c\x35\xb0\x88\x50\x64\x5e\x1d\xa7\x3c\x6a\x11\xc2\x7e\xf2\x47\xfe\xae\x02\x5c\xb8\xd5\x36\x71\x1c\xfc\x16\x35\xe5\x5e\x7e\xcc\xa3\xca\x32\x09\x24\xa4\x9a\x7c\x0b\x88\x4c\xc6\x09\x8f\xa8\x99\x63\xfe\x51\xed\xc4\xef\x3c\x9f\xec\x58\x35\xd3\x4f\x22\x34\x36\xc6\x77\xa2\x7f\x9b\x4f\x06\x6e\x32\x37\x65\xfc\xb2\x2e\x40\x0f\x54\x2a\x04\x17\x36\x6c\x1b\x16\x6e\x65\xf5\x65\x79\x7b\xff\x7e\x78\xbe\x2c\x60\xf7\x59\x70\xd5\x0e\xc6\xae\x0b\xa0\xbd\xaf\xd1\x8a\xb5\xb5\xc6\xc2\x7e\x9c\xdb\xda\x0d\xcd\xdc\xf7\xa8\x03\x5a\xbb\x00\x9d\x00\xd7\xce\x2e\x35\x1e\x6c\x48\xa7\x3a\x43\x70\x07\xb5\x36\x04\x4a\x50\xee\x35\x78\x3e\xdf\xa0\x2f\xc8\x20\x8f\xec\x7e\xbc\x8f\xf3\x77\xf4\xf8\xe0\xa2\x76\x79\xe1\x89\x12\xbc\x8d\x1c\xb2\x4b\x2c\xa3\x98\xb4\xc6\x60\x37\x5e\x7d\xdf\xe7\x79\xda\xb8\x5a\xe7\x57\x2f\xca\x6c\x14\x67\x79\x6f\x66\x47\x58\x5f\x1e\x34\x96\xae\xe0\x38\xdc\x73\x37\x70\xec\x63\x47\x9b\xd4\x05\x58\xdb\xd2\xce\xc8\x0d\xb3\x89\xed\x71\xbf\xc9\x12\x6b\xf0\x2a\x67\xf1\x1c\xaf\x07\x15\xaf\x7f\x5c\xa8\x7c\x1f\x30\x5e\xe9\x65\x6e\x15\x8c\xc3\xba\xf6\x6d\x4c\x3d\x12\x69\x5c\x69\x73\x79\xc3\xf7\xfd\xf7\x1f\x86\xa3\x0f\xd7\xc3\xdb\xcb\xf3\xc1\x2f\x83\xcb\x8b\x72\x63\xef\xf6\xee\xe6\xe3\x60\x38\xb8\xb9\x1e\x5c\xbf\x29\xbf\xbf\xfb\x70\xbd\xf2\xea\xf2\xfc\xe6\xfa\x7c\xf0\xae\xf6\x7a\xf8\xfe\xe6\xf6\xb6\xf6\xee\xf2\xee\xee\xe6\xae\xfc\xe2\xe2\xf2\xcd\x5d\xff\xe2\xf2\xa2\xd0\x7a\xd1\x39\xf5\xf2\x22\xd2\xd5\x23\xed\x92\x2e\x0d\x79\x02\xab\xc3\xce\xe0\x3a\x2b\x9a\x3f\x09\x38\x81\xb2\x4a\x67\x60\x5d\x5c\x7e\xe3\xfc\x6d\xcb\x59\x9f\x33\x34\x54\xb9\x2b\x61\x11\x6d\x4c\x76\x67\xcb\xab\x89\x53\x47\x30\xb7\x45\x46\x2b\xff\xb1\x96\x4c\x88\x96\x0e\x89\x82\x4c\x76\x5b\x51\xc3\x24\x8d\xa2\x39\xa4\x1a\xc7\x11\xe5\xa4\x97\x36\xcd\xc9\x2f\x5f\x34\xb0\x40\x93\xd5\x3f\xb6\x30\xb7\x04\x91\x19\x3e\xa5\x68\x9e\x4b\xed\xdb\xaa\x32\x2f\x27\x72\x59\x8e\x41\xa7\x2c\x04\xd4\x90\x26\x81\x42\xbf\xd8\xb6\x63\x74\x92\xca\xbc\xba\xd7\x72\x62\x66\xa8\x72\xa9\x0a\x97\x66\x22\x15\xbf\xba\x59\x2e\xbb\xde\xe3\x3b\x3a\x2e\x0c\x32\x22\xee\x71\x2d\x85\x18\xad\x1a\x90\x8a\xcc\x3e\x8e\x40\x11\x36\x19\x8d\xe2\xd7\x5a\x32\x79\x5b\x5f\xdb\x6c\x45\x39\x03\x59\x83\x48\x50\xa4\x8d\x54\xe4\x7c\x00\x93\x54\xb0\x0c\x99\xb8\x99\x37\xa6\x2e\x0d\x1d\x86\x7d\x76\x03\x1f\x0d\x8e\x58\xbd\x2b\xbc\x06\xc3\x36\x37\x97\xdb\x11\xad\x7f\x3f\x5c\xed\x6e\xd6\xb1\x8c\x35\xe6\xe4\x6b\x24\x6a\xcc\xe6\x5b\x2a\x94\x6a\xde\xe8\x4a\xaf\x2e\xe8\xaa\x65\xaa\xd8\x6a\xeb\x79\x2b\x0b\x35\x34\x81\x9a\x85\xfc\xf9\xb7\x1b\xc8\x3a\xd7\x8d\xd2\x14\xad\xa7\xac\xc5\xf2\x1d\xda\xe1\x5b\x69\x51\x6d\x36\x97\x08\xb5\xb4\xce\x6b\x4d\xb5\x8e\x9b\x4b\xfd\x7e\xc0\x1e\x01\xfe\x3d\x13\x92\xfc\x7e\xf1\xe2\xf2\x49\x6b\x95\x6b\x07\xf8\x5d\x57\x54\x83\xce\xb7\x39\x01\xb7\xba\xdb\xd7\x53\xc1\x07\x74\x42\x8c\x4f\xf2\xcb\xef\x3b\xd8\xb8\xc2\xef\x8f\x30\x76\x39\x6d\x5f\x68\x75\x02\x2c\x55\x8a\x84\x89\xe6\x60\x42\xae\xdd\xc6\x32\xd3\x76\x6f\x88\x11\x5b\x96\xc7\xc3\xbf\xf5\xde\xcd\xaf\xe9\xb2\x71\xf2\x36\x1d\x93\x12\x64\xa8\x85\x1d\xce\xb6\xcb\xfd\x9a\xe0\x7b\x3d\x60\xb6\xf9\xb6\x24\x44\xc8\x83\x70\x54\x3e\x9e\x6a\xd3\x7c\x2c\x65\x44\x28\xda\x9a\xef\x8d\x9f\xd7\x75\xcc\x4a\x9b\xec\xaf\xfd\x96\x82\x80\x8c\x4d\x0a\x46\x13\x1c\x2b\xce\x76\x76\x49\x36\x3d\x5f\x80\xb5\xfe\x52\xd7\x28\xcf\x8e\x67\xf7\x08\x6f\xf9\xf0\xa3\x0d\x3b\x43\x5d\x86\x1b\x18\xe7\x2b\xc1\x26\x13\xa4\x5b\x1a\x93\xab\x7f\xd7\xb2\x39\x2e\x4b\xb5\x65\xbb\x13\x7c\xd7\x30\xa9\x97\x24\x85\x30\x50\x9c\xc5\x77\x73\x4d\xc3\x3d\xe5\xc3\x73\xcd\xb9\x4c\xab\x19\x82\x0d\xbf\xfc\xba\x72\x1b\xfa\x37\x57\x84\xdd\x0e\x3e\x2a\x25\xdf\xaa\x93\xd7\x98\xb3\xe9\x12\xd7\xe1\xd9\x73\x50\x4b\xce\xb3\x92\x40\xcf\xb5\x0d\xbc\x75\xc1\xfc\x64\x79\xce\x6a\xfc\x6f\x4e\x6a\xde\xd5\x2f\xfe\x6d\xe9\xa1\xbf\x9c\x77\x76\x80\x9a\x52\xf3\xb5\xab\xf5\x2a\xb7\x6c\x0e\xd0\x7a\x13\x58\xdc\x5e\x72\xc0\x7d\xf3\xb6\xd9\x68\x79\x7a\x31\xe2\x8d\xc7\x7d\x6b\x0c\xb8\xf9\xd4\x70\xfd\x41\x50\x79\xe4\xaa\xd1\x57\x5b\x1a\x8e\x8b\xeb\xac\x17\x19\x51\x05\x92\x96\xd7\x90\xe8\xab\x21\x25\x30\xba\x90\xac\x74\x0f\xa9\x76\xdb\xea\xca\x56\xb9\x59\x8f\xad\xdb\x9f\xba\x6e\xf9\xd7\xa9\x56\x9a\xa3\xc7\xa3\xff\x07\x00\x00\xff\xff\x63\xb9\xde\xa2\x77\x3b\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 15223, mode: os.FileMode(420), modTime: time.Unix(1553276569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
