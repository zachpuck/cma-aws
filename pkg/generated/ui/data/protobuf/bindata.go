// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x6f\xdb\x46\x12\x7f\xd7\xa7\x18\xe8\xe5\x9c\x83\x2d\xc5\x4e\x73\x57\xd8\xf5\xe1\x54\xd9\x4d\x84\x24\xb2\x61\x3a\x31\xfa\x24\xac\x96\x23\x6a\xcf\xe4\x2e\xbb\x7f\xa4\xa8\x81\xbf\xfb\x61\x76\x97\x14\x49\x49\x4e\xd3\x06\x07\x9c\x80\x36\xe4\xee\xcc\x70\xe6\x37\x7f\x77\x3d\x1c\xc2\x58\x95\x1b\x2d\xb2\xa5\x85\xb3\x97\xa7\x3f\x42\xc2\x0a\xe3\x64\x06\xc9\x55\x02\xe3\x5c\xb9\x14\xa6\xcc\x8a\x15\xc2\x58\x15\xa5\xb3\x42\x66\x70\x8f\xac\x00\xe6\xec\x52\x69\x33\xe8\x0d\x87\xbd\xe1\x10\xde\x0b\x8e\xd2\x60\x0a\x4e\xa6\xa8\xc1\x2e\x11\x46\x25\xe3\x4b\xac\x76\x8e\xe1\x13\x6a\x23\x94\x84\xb3\xc1\x4b\x38\x22\x82\x7e\xdc\xea\xbf\xb8\x20\x11\x1b\xe5\xa0\x60\x1b\x90\xca\x82\x33\x08\x76\x29\x0c\x2c\x44\x8e\x80\x9f\x39\x96\x16\x84\x04\xae\x8a\x32\x17\x4c\x72\x84\xb5\xb0\x4b\xff\x9d\x28\x85\x34\x81\x5f\xa3\x0c\x35\xb7\x4c\x48\x60\xc0\x55\xb9\x01\xb5\x68\x12\x02\xb3\x51\x69\xfa\x2d\xad\x2d\xcf\x87\xc3\xf5\x7a\x3d\x60\x5e\xe1\x81\xd2\xd9\x30\x0f\xa4\x66\xf8\x7e\x32\xbe\x9e\x26\xd7\x27\x67\x83\x97\x91\xe9\xa3\xcc\xd1\x18\xd0\xf8\x9b\x13\x1a\x53\x98\x6f\x80\x95\x65\x2e\x38\x9b\xe7\x08\x39\x5b\x83\xd2\xc0\x32\x8d\x98\x82\x55\xa4\xf4\x5a\x0b\xc2\xed\x18\x8c\x5a\xd8\x35\xd3\x48\x62\x52\x61\xac\x16\x73\x67\x5b\x98\x55\x2a\x0a\xd3\x22\x50\x12\x98\x84\xfe\x28\x81\x49\xd2\x87\x9f\x47\xc9\x24\x39\x26\x21\x0f\x93\xfb\xb7\x37\x1f\xef\xe1\x61\x74\x77\x37\x9a\xde\x4f\xae\x13\xb8\xb9\x83\xf1\xcd\xf4\x6a\x72\x3f\xb9\x99\x26\x70\xf3\x0b\x8c\xa6\xbf\xc2\xbb\xc9\xf4\xea\x18\x50\xd8\x25\x6a\xc0\xcf\xa5\x26\x0b\x94\x06\x41\x68\x62\xea\xa1\x4b\x10\x5b\x2a\x2c\x54\x50\xc9\x94\xc8\xc5\x42\x70\xc8\x99\xcc\x1c\xcb\x10\x32\xb5\x42\x2d\x29\x12\x4a\xd4\x85\x30\xe4\x55\x03\x4c\xa6\x24\x26\x17\x85\xb0\xcc\xfa\xa5\x1d\xbb\x06\x3d\x22\xf9\x20\xf8\x92\x61\x0e\x9f\x50\xe2\xef\x82\xc1\x4f\xc5\x2a\x3c\xfd\x3b\x2b\x98\xc8\x07\x5c\x15\xff\x22\xba\x51\x2e\x1e\x19\xbc\x67\xda\xa0\x84\x9f\x18\xbd\x0d\x72\xff\xd6\x24\xec\x99\x8d\xb4\xec\x33\x5c\x42\xbf\xd4\xca\xaa\x57\xfd\x8b\x5e\xaf\x64\xfc\x91\x54\xe5\x05\x63\x6b\x73\xd1\xeb\x89\xa2\x54\xda\x42\x3f\x53\x2a\xcb\x71\xc8\x4a\x31\x64\x52\xaa\xa8\xe9\xc0\x73\xf6\x2f\x6a\x32\xff\xce\x4f\x32\x94\x27\x66\xcd\xb2\x0c\xf5\x50\x95\x9e\x74\x2f\x5b\xaf\x17\x76\xe1\x28\xd3\x25\x1f\x64\xcc\xe2\x9a\x6d\xc2\x36\x9f\x65\x28\x67\x51\xca\x20\x4a\x19\xa8\x12\x25\x2b\xc5\xea\xac\xda\x79\x01\x97\xf0\xa5\x07\x20\xe4\x42\x9d\xfb\x27\x00\x2b\x6c\x8e\xe7\xd0\x1f\xe7\xce\x58\xd4\xf0\x81\x49\x96\xa1\x86\xd1\x43\x02\x6f\x31\x2f\xe9\xf1\x76\xd2\xbf\xf0\xc4\xab\x90\x5e\xe7\xd0\x5f\xbd\x1c\x9c\x0e\x5e\xc6\x65\xae\xa4\x65\xdc\x56\x22\xe9\x27\x59\x41\x52\x3b\x6e\x88\xf4\xf4\x73\x3a\x3f\x87\x3e\x65\x86\x39\x1f\x0e\x33\x61\x97\x6e\x4e\x60\x0f\x4d\x28\x0e\x27\x5c\x72\x3b\xe4\x05\x3b\x61\x6b\xd3\xe0\x43\xf2\xca\x39\xf4\x77\xfd\x19\x89\x9e\xe8\x1f\xff\x3f\xfc\x6c\x51\x4b\x96\xcf\x52\xc5\x4d\xa5\xdc\x9f\xf9\x6e\x8a\x86\x6b\xe1\x51\x25\x9b\x94\x46\x60\x73\xe5\x2c\xfc\x01\xd0\x9e\x7a\x00\x86\x2f\xb1\x40\x73\x0e\x6f\xef\xef\x6f\x93\x8b\xee\x0a\x2d\x70\x25\x8d\xf3\x2b\xfd\x98\xe9\xf4\xb5\xe1\x7f\x8c\x92\x5e\x4c\xa9\x55\xea\xf8\xa1\xfd\xa7\x8b\x5e\xcf\xa0\x5e\x09\x8e\xb5\x4e\xc1\x5c\x4a\x60\x91\xe7\xc4\xbf\x12\xbe\x34\x32\xe0\x81\xc2\xef\xeb\x92\xc3\x58\x23\xb3\x58\xf1\x1d\xb5\x5e\x3f\x98\xec\x05\x68\xb4\x4e\x4b\xd3\xd9\xba\xc3\x32\xdf\xbc\x68\xf8\xbc\x8e\x4f\x1f\xff\x03\x56\x8a\x01\xe1\x5c\x45\xdd\xf6\x57\x3a\x0b\xe7\xd0\xf7\x19\xb2\x3a\x1d\x46\x7d\xfa\x2d\x9a\xb9\x4a\x37\x44\xf4\xf7\xed\xf2\x53\x74\x70\xcb\x30\x8d\x56\x0b\x5c\x85\xba\x62\x2c\xb3\xce\x50\x2d\xae\xad\xa4\x9a\x01\xc2\x1a\x78\x74\x73\xe4\x4a\x2e\x44\xe6\xcb\x0e\x57\x52\x22\xb7\x62\x25\xec\xa6\x46\xe2\x0d\xda\x1a\x86\xed\x73\x1b\x83\xed\xfa\x9f\x07\x20\xc3\xe7\x01\xd8\x6b\x69\x8a\x39\x5a\xdc\xe3\xbf\x2b\xbf\x51\x2b\xde\x7a\x6d\xeb\xde\xda\xfa\xf3\xea\x47\x4d\xbe\xd9\x82\xda\x57\x0c\x72\x61\x2c\xf9\x29\x32\x9a\x3d\x2e\x78\x4f\x24\x47\xed\xf7\x43\xae\xa0\xbd\xef\xed\x8e\x21\xe9\xf8\x75\x8b\x9c\x96\x55\x5d\xf4\x85\x55\x17\x3e\x35\x63\x85\x60\xa5\x00\xca\xcc\x86\xbb\xde\xa0\x8d\x63\xca\xa4\x41\x7e\xb4\x5d\xde\x31\x32\xae\x7f\x37\x03\xa3\xba\x7b\x6c\x7b\xea\xf5\x50\xba\xa2\x2a\x22\x49\xc8\xa7\xba\x94\x4c\x95\x05\x83\xd6\xbf\x26\xf7\xa3\xfb\x8f\xc9\xec\xe3\x34\xb9\xbd\x1e\x4f\x7e\x99\x5c\x5f\xc1\x25\xbc\xbc\xa8\x48\xef\x97\x08\xb7\x77\x37\x9f\x26\xc9\xe4\x66\x3a\x99\xbe\xf1\xb9\x89\x20\x64\x4a\xb5\x0b\x8d\xcf\xd7\x2a\x47\x85\x81\x39\x52\xb3\xe7\xbe\xc0\xa4\x03\x2f\xa5\xc5\x7e\x09\xa7\x2d\xd9\x77\x1f\xa7\x5f\x15\xbb\x64\x24\x17\x65\x25\x36\xd4\x02\x03\x0b\x97\xe7\x1b\x70\x86\xa6\xa9\xf0\xa9\x4a\xda\x25\x9c\xb5\xbf\x72\x3d\xbe\x99\x8e\x27\xef\xf7\x7f\x89\x59\x30\xaa\x40\x58\x2b\xfd\x48\x72\x19\xd5\x13\xcc\x37\xd1\x98\x54\x49\xa4\xb1\xaa\xa1\xd2\x31\x18\xc7\x97\xc0\x0c\xb8\x32\xd3\x2c\x25\x32\xda\x2e\x98\x57\x58\x69\x90\x2a\xc5\x7a\x88\x8b\xca\x35\x94\xb8\x84\x57\x2d\x05\x93\xfb\x9b\xdb\xdb\x3f\x0c\x6f\x48\xdc\x34\xfa\x2f\x72\x5e\xc2\x0f\x2d\x91\xd7\x77\x77\x37\x77\xcf\xca\xa3\xe9\x77\x8e\xe0\x64\x80\xd0\x33\x07\xae\x4b\x78\xdd\x92\x75\x75\xfd\xe6\x6e\x74\x75\x7d\xf5\xac\xb8\x38\xe6\x1a\x9a\xc8\xb5\x07\x91\x40\x53\xa0\xd1\x58\xea\xb5\xe4\x2e\x58\x38\xe9\x37\x58\x5e\x15\xec\x5a\xf6\x25\xfc\xe3\x82\x22\xb7\x40\x63\x68\x20\xeb\x36\xb0\x46\xfc\xb2\x02\xab\x49\xbd\xfa\xba\x55\x64\x4b\xdd\x1f\x23\x3a\x34\x17\xcb\xcc\x8f\x31\x3b\xa1\xe7\x69\x69\xea\xac\xc6\x56\x9f\xc1\x9e\xa2\xf5\xe9\xdb\x48\x97\x94\xc8\xb7\x4c\x3e\xc4\x0e\x69\xeb\x53\xbc\xd1\xba\x97\xe8\xc7\x69\x1f\x17\xb6\xa5\xf6\x9a\x99\xa6\xd2\x74\x44\xf0\x87\x19\x02\x13\x4d\x48\xd1\xb9\x52\x39\xa8\xc7\x1d\x03\x52\xb4\x4c\xe4\xa6\x8b\x44\x64\x25\xdc\x4b\x25\x4d\xf0\x6b\x54\x6c\x62\xb1\xa8\x09\xbb\x26\xb4\x5a\xe5\x1f\x41\x3b\x57\xea\x91\xce\x24\xe5\xb3\x58\x8f\x35\xa6\x28\xad\x60\xb9\x21\xbe\xdf\x1c\xea\x4d\x7d\x64\x68\x36\xc1\xd1\x43\xd2\xa4\xe5\x8d\xe7\x66\x42\x5f\x31\xcb\x38\xca\x60\x6a\x56\xb9\x2c\x7e\x3d\xac\x84\xfc\xda\x6b\x5a\xc7\x35\x93\x4e\x8a\x85\x34\x37\x1b\x63\xb1\xd8\x05\xbf\x09\xe5\x95\x47\xff\x59\x40\xbb\x2d\xbc\x19\x11\xcc\x52\x3e\x37\xbe\xfd\x37\x13\xa0\xb3\x8a\x06\x55\xab\xd5\xe6\x5b\x50\x8d\xbd\xfc\x7f\x08\xe9\xee\x10\xb2\x35\x6f\xac\x5c\x9e\xb6\x80\x9d\x63\x65\x55\xcc\xcc\x7d\x41\x9d\xd4\x73\x1f\xb1\x36\x53\x20\xaa\x12\x07\xc3\xc3\x81\x1b\x87\x8b\x86\x26\xdf\x25\xf8\x4e\x0f\x23\x05\x47\xcc\x0f\x10\x99\x3f\xc6\xf2\x25\x72\x4a\x09\xb1\xf0\x99\x6e\xd0\xbe\xd8\x0b\xe5\x73\xfa\xff\xa5\x08\x8d\x4c\xef\xf7\xce\x65\x58\x86\xfe\xb9\xa7\x18\xec\x82\xda\x24\xda\x2a\x73\xd5\xa9\x04\x4d\xeb\x44\xda\xd2\x61\x4f\xdd\xd8\x13\xd1\xdb\x20\x1c\xa5\xa9\x08\xad\x61\xcf\x00\xd6\x3e\x16\x1c\x10\x19\x08\x66\x95\x05\xdd\x26\x7b\x98\xbf\x3d\x27\xd5\x51\xf6\xc3\x37\x26\xc8\xeb\x7d\x00\x36\xea\xc4\xff\x3f\x8c\xcd\xba\xd5\x38\x89\x59\x55\x1d\xc4\xe8\xf1\x80\xd8\x06\x7d\x77\x56\xf9\x66\xcf\xbc\x3e\xdc\x7b\x5b\xed\x7a\x6f\xc1\xad\x7b\xf8\x09\x70\xa7\x35\x4a\x9b\xc7\xae\x4b\xc3\xdf\xda\x5f\x77\x15\x8c\x99\xaf\x4e\x10\xd5\x79\x41\x2d\xe0\x9d\x9b\xa3\x96\x68\xb1\xc5\xf5\xf8\xa3\x99\x55\x44\xdd\x99\x74\xf4\x90\x7c\x6d\xf2\x18\x3d\x24\xde\x0a\xd2\xa9\xed\x85\x83\xf3\x84\x30\xf0\x76\xb4\x2d\x0b\x4b\x91\x2d\x67\x6c\xc5\x44\xce\xe6\x82\x46\xae\x1d\xe8\x17\x6c\xae\x05\x8f\x0d\xdd\x99\xce\xdc\x84\x96\x86\xe2\x59\x24\xf2\xb8\x13\xf0\x91\x97\xb7\x8b\xab\x8b\x57\x81\x7e\x4c\xaf\x46\xe2\xca\x99\x95\xaf\x3a\x75\xf6\x4b\x6b\x0a\x46\xae\xd1\xbe\xc3\xcd\x24\xf5\x82\x46\xb7\x13\x18\x71\x8e\xa6\x05\xaa\xf1\x54\xb3\x47\xdc\xcc\x3a\xa9\xb2\x95\x11\xb8\xde\xe1\xa6\x96\xc3\x0e\xc9\x09\x1b\x24\x6e\xf7\xd8\x10\x12\xfb\xb0\x88\x03\xad\x71\xaf\x13\xbf\x74\x9d\x4f\x35\x05\xc6\xbe\xa8\x54\x1d\x88\x96\xc2\x0a\xa4\xcc\xb2\x59\x2c\x39\xcf\xf4\xfd\xb9\x13\xed\x4e\xfb\x2d\x6d\xff\xe7\x5f\x6f\x40\x58\x2c\x4c\xc5\x74\xab\x63\x86\x3a\x8d\x29\x95\x2c\x1a\x44\x8d\x72\x9a\x63\x3b\x02\x27\xd2\x58\x7f\xb5\x9e\x69\xe5\xca\x4e\x7b\x19\x3d\x24\xd5\xfe\x1b\xda\x06\x11\xdf\x66\x81\x3a\xc4\xe0\x36\x98\x05\x5f\xee\x80\xd1\x08\x97\x06\x28\xdb\xe3\x70\xcd\x58\x75\x61\x67\x4e\x90\x19\x7b\x72\x7a\x0c\x68\xf9\xe0\x45\x4d\xd9\x75\xd5\xe9\xc5\xae\x90\x56\x86\xfc\xae\x24\x9a\x86\xc0\xf9\x31\x54\xcf\x67\xdc\x3f\xaf\x91\x9e\xd3\xee\x97\x6a\x00\xe2\x27\x9b\x52\x67\x41\x6a\x8d\xfe\x53\x6d\xff\x2f\x4a\xc3\x7a\x89\x32\x9c\x41\xed\x52\xc8\xcc\x00\xd3\x08\x2c\xd7\xc8\xd2\x4d\x75\xea\xed\xc2\xb2\xc7\x57\x2d\x78\x28\xcc\x3e\xdd\x8e\x41\xa4\xc7\x30\xcf\x99\x7c\xf4\x71\x4c\xff\xf5\x83\x44\xa0\x73\x2d\xbd\x6f\x94\xeb\x1f\xc3\x42\xe4\x79\x98\x5c\x36\xca\x79\x05\x28\x3c\x3e\xdd\x8e\xbb\x48\xae\x4a\xde\x4a\xbc\x6a\x78\x43\xee\x34\xe1\xe7\x9d\xdc\x65\x32\x71\x37\x84\x40\xe0\x3f\xbb\xe8\xea\x3b\x19\x7d\x00\xad\x72\xec\x4e\x68\x70\xc4\xb4\xdc\x71\xa9\x60\xc5\x8c\xa8\x67\x4c\xcb\x6d\x74\x6e\x91\xed\x04\x29\xa4\xb8\x10\x12\x81\x81\xdd\x94\xe8\x2f\x11\xa4\x2b\xe6\x54\x47\x17\x75\x88\x9a\x2e\xcc\xed\x48\x6e\x21\x5c\xcb\xf7\xf2\x8e\x8a\xd7\x83\x9c\xe9\x0c\x0f\x04\xa0\x27\xea\x82\xf6\x41\x48\x51\xb8\x62\x9f\x22\x70\x94\xe2\x82\xb9\xdc\xfa\x3c\xff\x1d\xb5\xda\x8a\x14\xd2\xbe\x3a\x83\x42\xc8\xd9\x6f\x8e\x49\x1b\xea\x7a\x1b\xce\x0f\xec\xf3\x5f\x90\xcc\x3e\x37\x25\xbf\x6a\x49\xae\x06\x12\xd1\x82\x17\x8e\xc2\x35\x16\xcb\x81\x39\xab\x4e\x32\x94\xa8\x7d\x36\x74\x67\xe1\xdd\xae\xfa\x43\x5b\x7e\xad\x31\xf5\x1e\x8c\x77\x29\x5b\xed\x53\x34\xfe\xaf\x69\x5f\xb5\x22\x12\x36\x2d\x79\x1d\xeb\xce\x53\xec\x62\x6f\xd0\x36\xbb\x38\x55\xf9\x24\x5c\xf3\x35\x66\xf3\xed\x7d\x1e\x7c\x89\x7c\x61\x46\xa7\x28\xad\xb8\xab\xd3\xca\x2e\x5f\x77\x9e\x5f\x80\x2a\x09\x1a\xe2\xa2\xe3\xff\xcd\xbb\x03\x07\xcd\x4a\xd4\x9e\x6b\xc6\x9d\x4c\xb7\x2c\xab\xee\xa8\x32\x41\x67\xff\x52\x19\x61\x95\xde\x74\x21\xcf\x84\x6d\x8c\x24\xa7\x3b\x29\xb8\x64\x66\x59\x0d\x62\x24\x89\xab\xa2\x10\x76\x9f\x94\xb0\xb3\x13\x78\x7b\x86\x13\xab\x11\xbd\xa9\x3c\x47\x26\x43\xb5\xa3\xc6\xb5\x57\x2c\x11\xcf\xc2\x3d\x53\x37\xf2\xae\x7c\xd5\x5a\x84\xa6\xd7\xe5\xf5\x8b\xb3\x34\xf0\xb5\x23\xea\xd3\xd6\xc3\x99\x1f\x53\xd2\x30\xb1\x16\xa5\x88\xd7\x5e\x4d\x1d\x54\x03\x9f\xd7\x2d\x39\xe3\xc0\xa1\xb7\x73\x52\x83\x8f\x57\x9b\xfe\x1e\xab\xc1\x75\x9b\x33\x4b\x9e\x03\x61\x03\x08\x81\x30\x8c\x38\x43\xd0\x4e\xfa\x3f\x90\xc6\x01\xb0\x21\xb1\xac\x18\x2f\xe1\x9f\xdd\xda\x56\x99\xd4\x08\x0a\xbf\xb5\x27\x56\xa2\x35\xb3\xe6\x69\xa0\x3a\xec\xf5\xfe\x1b\x00\x00\xff\xff\x25\x1e\xfd\xbe\xd6\x1f\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8150, mode: os.FileMode(420), modTime: time.Unix(1553276467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
